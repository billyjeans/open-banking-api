/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.OverdraftOverdraftFeesCharges;

/**
 * Provides overdraft details for a specific tier or band
 */
@ApiModel(description = "Provides overdraft details for a specific tier or band")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-29T19:18:25.258264300+02:00[Europe/Berlin]")
public class OverdraftOverdraftTierBand {
  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_TIER_VALUE_MIN = "TierValueMin";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MIN)
  private String tierValueMin;

  public static final String SERIALIZED_NAME_TIER_VALUE_MAX = "TierValueMax";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MAX)
  private String tierValueMax;

  public static final String SERIALIZED_NAME_E_A_R = "EAR";
  @SerializedName(SERIALIZED_NAME_E_A_R)
  private String EAR;

  public static final String SERIALIZED_NAME_REPRESENTATIVE_A_P_R = "RepresentativeAPR";
  @SerializedName(SERIALIZED_NAME_REPRESENTATIVE_A_P_R)
  private String representativeAPR;

  public static final String SERIALIZED_NAME_AGREEMENT_LENGTH_MIN = "AgreementLengthMin";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_LENGTH_MIN)
  private Float agreementLengthMin;

  public static final String SERIALIZED_NAME_AGREEMENT_LENGTH_MAX = "AgreementLengthMax";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_LENGTH_MAX)
  private Float agreementLengthMax;

  /**
   * Specifies the period of a fixed length overdraft agreement
   */
  @JsonAdapter(AgreementPeriodEnum.Adapter.class)
  public enum AgreementPeriodEnum {
    DAY("Day"),
    
    HALF_YEAR("Half Year"),
    
    MONTH("Month"),
    
    QUARTER("Quarter"),
    
    WEEK("Week"),
    
    YEAR("Year");

    private String value;

    AgreementPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgreementPeriodEnum fromValue(String value) {
      for (AgreementPeriodEnum b : AgreementPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgreementPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgreementPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgreementPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgreementPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGREEMENT_PERIOD = "AgreementPeriod";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_PERIOD)
  private AgreementPeriodEnum agreementPeriod;

  /**
   * Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is £2k and the interest tiers are:- 0-£500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the ‘Whole’ of the account balance,  and in the 2nd that it is ‘Tiered’.
   */
  @JsonAdapter(OverdraftInterestChargingCoverageEnum.Adapter.class)
  public enum OverdraftInterestChargingCoverageEnum {
    BANDED("Banded"),
    
    TIERED("Tiered"),
    
    WHOLE("Whole");

    private String value;

    OverdraftInterestChargingCoverageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OverdraftInterestChargingCoverageEnum fromValue(String value) {
      for (OverdraftInterestChargingCoverageEnum b : OverdraftInterestChargingCoverageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OverdraftInterestChargingCoverageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverdraftInterestChargingCoverageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverdraftInterestChargingCoverageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OverdraftInterestChargingCoverageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OVERDRAFT_INTEREST_CHARGING_COVERAGE = "OverdraftInterestChargingCoverage";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_INTEREST_CHARGING_COVERAGE)
  private OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage;

  public static final String SERIALIZED_NAME_BANK_GUARANTEED_INDICATOR = "BankGuaranteedIndicator";
  @SerializedName(SERIALIZED_NAME_BANK_GUARANTEED_INDICATOR)
  private Boolean bankGuaranteedIndicator;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  public static final String SERIALIZED_NAME_OVERDRAFT_FEES_CHARGES = "OverdraftFeesCharges";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_FEES_CHARGES)
  private List<OverdraftOverdraftFeesCharges> overdraftFeesCharges = null;


  public OverdraftOverdraftTierBand identification(String identification) {
    
    this.identification = identification;
    return this;
  }

   /**
   * Unique and unambiguous identification of a  Tier Band for a overdraft.
   * @return identification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique and unambiguous identification of a  Tier Band for a overdraft.")

  public String getIdentification() {
    return identification;
  }


  public void setIdentification(String identification) {
    this.identification = identification;
  }


  public OverdraftOverdraftTierBand tierValueMin(String tierValueMin) {
    
    this.tierValueMin = tierValueMin;
    return this;
  }

   /**
   * Minimum value of Overdraft Tier/Band
   * @return tierValueMin
  **/
  @ApiModelProperty(required = true, value = "Minimum value of Overdraft Tier/Band")

  public String getTierValueMin() {
    return tierValueMin;
  }


  public void setTierValueMin(String tierValueMin) {
    this.tierValueMin = tierValueMin;
  }


  public OverdraftOverdraftTierBand tierValueMax(String tierValueMax) {
    
    this.tierValueMax = tierValueMax;
    return this;
  }

   /**
   * Maximum value of Overdraft Tier/Band
   * @return tierValueMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum value of Overdraft Tier/Band")

  public String getTierValueMax() {
    return tierValueMax;
  }


  public void setTierValueMax(String tierValueMax) {
    this.tierValueMax = tierValueMax;
  }


  public OverdraftOverdraftTierBand EAR(String EAR) {
    
    this.EAR = EAR;
    return this;
  }

   /**
   * EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.
   * @return EAR
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.")

  public String getEAR() {
    return EAR;
  }


  public void setEAR(String EAR) {
    this.EAR = EAR;
  }


  public OverdraftOverdraftTierBand representativeAPR(String representativeAPR) {
    
    this.representativeAPR = representativeAPR;
    return this;
  }

   /**
   * An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
   * @return representativeAPR
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.")

  public String getRepresentativeAPR() {
    return representativeAPR;
  }


  public void setRepresentativeAPR(String representativeAPR) {
    this.representativeAPR = representativeAPR;
  }


  public OverdraftOverdraftTierBand agreementLengthMin(Float agreementLengthMin) {
    
    this.agreementLengthMin = agreementLengthMin;
    return this;
  }

   /**
   * Specifies the minimum length of a band for a fixed overdraft agreement
   * @return agreementLengthMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the minimum length of a band for a fixed overdraft agreement")

  public Float getAgreementLengthMin() {
    return agreementLengthMin;
  }


  public void setAgreementLengthMin(Float agreementLengthMin) {
    this.agreementLengthMin = agreementLengthMin;
  }


  public OverdraftOverdraftTierBand agreementLengthMax(Float agreementLengthMax) {
    
    this.agreementLengthMax = agreementLengthMax;
    return this;
  }

   /**
   * Specifies the maximum length of a band for a fixed overdraft agreement
   * @return agreementLengthMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of a band for a fixed overdraft agreement")

  public Float getAgreementLengthMax() {
    return agreementLengthMax;
  }


  public void setAgreementLengthMax(Float agreementLengthMax) {
    this.agreementLengthMax = agreementLengthMax;
  }


  public OverdraftOverdraftTierBand agreementPeriod(AgreementPeriodEnum agreementPeriod) {
    
    this.agreementPeriod = agreementPeriod;
    return this;
  }

   /**
   * Specifies the period of a fixed length overdraft agreement
   * @return agreementPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the period of a fixed length overdraft agreement")

  public AgreementPeriodEnum getAgreementPeriod() {
    return agreementPeriod;
  }


  public void setAgreementPeriod(AgreementPeriodEnum agreementPeriod) {
    this.agreementPeriod = agreementPeriod;
  }


  public OverdraftOverdraftTierBand overdraftInterestChargingCoverage(OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage) {
    
    this.overdraftInterestChargingCoverage = overdraftInterestChargingCoverage;
    return this;
  }

   /**
   * Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is £2k and the interest tiers are:- 0-£500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the ‘Whole’ of the account balance,  and in the 2nd that it is ‘Tiered’.
   * @return overdraftInterestChargingCoverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is £2k and the interest tiers are:- 0-£500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the ‘Whole’ of the account balance,  and in the 2nd that it is ‘Tiered’.")

  public OverdraftInterestChargingCoverageEnum getOverdraftInterestChargingCoverage() {
    return overdraftInterestChargingCoverage;
  }


  public void setOverdraftInterestChargingCoverage(OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage) {
    this.overdraftInterestChargingCoverage = overdraftInterestChargingCoverage;
  }


  public OverdraftOverdraftTierBand bankGuaranteedIndicator(Boolean bankGuaranteedIndicator) {
    
    this.bankGuaranteedIndicator = bankGuaranteedIndicator;
    return this;
  }

   /**
   * Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
   * @return bankGuaranteedIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.")

  public Boolean getBankGuaranteedIndicator() {
    return bankGuaranteedIndicator;
  }


  public void setBankGuaranteedIndicator(Boolean bankGuaranteedIndicator) {
    this.bankGuaranteedIndicator = bankGuaranteedIndicator;
  }


  public OverdraftOverdraftTierBand notes(List<String> notes) {
    
    this.notes = notes;
    return this;
  }

  public OverdraftOverdraftTierBand addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<String>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Optional additional notes to supplement the Tier/band details
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional additional notes to supplement the Tier/band details")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public OverdraftOverdraftTierBand overdraftFeesCharges(List<OverdraftOverdraftFeesCharges> overdraftFeesCharges) {
    
    this.overdraftFeesCharges = overdraftFeesCharges;
    return this;
  }

  public OverdraftOverdraftTierBand addOverdraftFeesChargesItem(OverdraftOverdraftFeesCharges overdraftFeesChargesItem) {
    if (this.overdraftFeesCharges == null) {
      this.overdraftFeesCharges = new ArrayList<OverdraftOverdraftFeesCharges>();
    }
    this.overdraftFeesCharges.add(overdraftFeesChargesItem);
    return this;
  }

   /**
   * Overdraft fees and charges
   * @return overdraftFeesCharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Overdraft fees and charges")

  public List<OverdraftOverdraftFeesCharges> getOverdraftFeesCharges() {
    return overdraftFeesCharges;
  }


  public void setOverdraftFeesCharges(List<OverdraftOverdraftFeesCharges> overdraftFeesCharges) {
    this.overdraftFeesCharges = overdraftFeesCharges;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverdraftOverdraftTierBand overdraftOverdraftTierBand = (OverdraftOverdraftTierBand) o;
    return Objects.equals(this.identification, overdraftOverdraftTierBand.identification) &&
        Objects.equals(this.tierValueMin, overdraftOverdraftTierBand.tierValueMin) &&
        Objects.equals(this.tierValueMax, overdraftOverdraftTierBand.tierValueMax) &&
        Objects.equals(this.EAR, overdraftOverdraftTierBand.EAR) &&
        Objects.equals(this.representativeAPR, overdraftOverdraftTierBand.representativeAPR) &&
        Objects.equals(this.agreementLengthMin, overdraftOverdraftTierBand.agreementLengthMin) &&
        Objects.equals(this.agreementLengthMax, overdraftOverdraftTierBand.agreementLengthMax) &&
        Objects.equals(this.agreementPeriod, overdraftOverdraftTierBand.agreementPeriod) &&
        Objects.equals(this.overdraftInterestChargingCoverage, overdraftOverdraftTierBand.overdraftInterestChargingCoverage) &&
        Objects.equals(this.bankGuaranteedIndicator, overdraftOverdraftTierBand.bankGuaranteedIndicator) &&
        Objects.equals(this.notes, overdraftOverdraftTierBand.notes) &&
        Objects.equals(this.overdraftFeesCharges, overdraftOverdraftTierBand.overdraftFeesCharges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identification, tierValueMin, tierValueMax, EAR, representativeAPR, agreementLengthMin, agreementLengthMax, agreementPeriod, overdraftInterestChargingCoverage, bankGuaranteedIndicator, notes, overdraftFeesCharges);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverdraftOverdraftTierBand {\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    tierValueMin: ").append(toIndentedString(tierValueMin)).append("\n");
    sb.append("    tierValueMax: ").append(toIndentedString(tierValueMax)).append("\n");
    sb.append("    EAR: ").append(toIndentedString(EAR)).append("\n");
    sb.append("    representativeAPR: ").append(toIndentedString(representativeAPR)).append("\n");
    sb.append("    agreementLengthMin: ").append(toIndentedString(agreementLengthMin)).append("\n");
    sb.append("    agreementLengthMax: ").append(toIndentedString(agreementLengthMax)).append("\n");
    sb.append("    agreementPeriod: ").append(toIndentedString(agreementPeriod)).append("\n");
    sb.append("    overdraftInterestChargingCoverage: ").append(toIndentedString(overdraftInterestChargingCoverage)).append("\n");
    sb.append("    bankGuaranteedIndicator: ").append(toIndentedString(bankGuaranteedIndicator)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    overdraftFeesCharges: ").append(toIndentedString(overdraftFeesCharges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

