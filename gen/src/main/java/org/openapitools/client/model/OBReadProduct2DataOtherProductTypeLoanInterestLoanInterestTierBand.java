/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.OBInterestFixedVariableType1Code;
import org.openapitools.client.model.OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestFeesCharges;
import org.openapitools.client.model.OBReadProduct2DataOtherProductTypeLoanInterestOtherLoanProviderInterestRateType;

/**
 * Tier Band Details
 */
@ApiModel(description = "Tier Band Details")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-29T19:18:25.258264300+02:00[Europe/Berlin]")
public class OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand {
  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_TIER_VALUE_MINIMUM = "TierValueMinimum";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MINIMUM)
  private String tierValueMinimum;

  public static final String SERIALIZED_NAME_TIER_VALUE_MAXIMUM = "TierValueMaximum";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MAXIMUM)
  private String tierValueMaximum;

  public static final String SERIALIZED_NAME_TIER_VALUE_MIN_TERM = "TierValueMinTerm";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MIN_TERM)
  private Integer tierValueMinTerm;

  /**
   * The unit of period (days, weeks, months etc.) of the Minimum Term
   */
  @JsonAdapter(MinTermPeriodEnum.Adapter.class)
  public enum MinTermPeriodEnum {
    PACT("PACT"),
    
    PDAY("PDAY"),
    
    PHYR("PHYR"),
    
    PMTH("PMTH"),
    
    PQTR("PQTR"),
    
    PWEK("PWEK"),
    
    PYER("PYER");

    private String value;

    MinTermPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinTermPeriodEnum fromValue(String value) {
      for (MinTermPeriodEnum b : MinTermPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinTermPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinTermPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinTermPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinTermPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MIN_TERM_PERIOD = "MinTermPeriod";
  @SerializedName(SERIALIZED_NAME_MIN_TERM_PERIOD)
  private MinTermPeriodEnum minTermPeriod;

  public static final String SERIALIZED_NAME_TIER_VALUE_MAX_TERM = "TierValueMaxTerm";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MAX_TERM)
  private Integer tierValueMaxTerm;

  /**
   * The unit of period (days, weeks, months etc.) of the Maximum Term
   */
  @JsonAdapter(MaxTermPeriodEnum.Adapter.class)
  public enum MaxTermPeriodEnum {
    PACT("PACT"),
    
    PDAY("PDAY"),
    
    PHYR("PHYR"),
    
    PMTH("PMTH"),
    
    PQTR("PQTR"),
    
    PWEK("PWEK"),
    
    PYER("PYER");

    private String value;

    MaxTermPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxTermPeriodEnum fromValue(String value) {
      for (MaxTermPeriodEnum b : MaxTermPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxTermPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxTermPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxTermPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxTermPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MAX_TERM_PERIOD = "MaxTermPeriod";
  @SerializedName(SERIALIZED_NAME_MAX_TERM_PERIOD)
  private MaxTermPeriodEnum maxTermPeriod;

  public static final String SERIALIZED_NAME_FIXED_VARIABLE_INTEREST_RATE_TYPE = "FixedVariableInterestRateType";
  @SerializedName(SERIALIZED_NAME_FIXED_VARIABLE_INTEREST_RATE_TYPE)
  private OBInterestFixedVariableType1Code fixedVariableInterestRateType;

  public static final String SERIALIZED_NAME_REP_A_P_R = "RepAPR";
  @SerializedName(SERIALIZED_NAME_REP_A_P_R)
  private String repAPR;

  /**
   * Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
   */
  @JsonAdapter(LoanProviderInterestRateTypeEnum.Adapter.class)
  public enum LoanProviderInterestRateTypeEnum {
    INBB("INBB"),
    
    INFR("INFR"),
    
    INGR("INGR"),
    
    INLR("INLR"),
    
    INNE("INNE"),
    
    INOT("INOT");

    private String value;

    LoanProviderInterestRateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoanProviderInterestRateTypeEnum fromValue(String value) {
      for (LoanProviderInterestRateTypeEnum b : LoanProviderInterestRateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoanProviderInterestRateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoanProviderInterestRateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoanProviderInterestRateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoanProviderInterestRateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOAN_PROVIDER_INTEREST_RATE_TYPE = "LoanProviderInterestRateType";
  @SerializedName(SERIALIZED_NAME_LOAN_PROVIDER_INTEREST_RATE_TYPE)
  private LoanProviderInterestRateTypeEnum loanProviderInterestRateType;

  public static final String SERIALIZED_NAME_LOAN_PROVIDER_INTEREST_RATE = "LoanProviderInterestRate";
  @SerializedName(SERIALIZED_NAME_LOAN_PROVIDER_INTEREST_RATE)
  private String loanProviderInterestRate;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  public static final String SERIALIZED_NAME_OTHER_LOAN_PROVIDER_INTEREST_RATE_TYPE = "OtherLoanProviderInterestRateType";
  @SerializedName(SERIALIZED_NAME_OTHER_LOAN_PROVIDER_INTEREST_RATE_TYPE)
  private OBReadProduct2DataOtherProductTypeLoanInterestOtherLoanProviderInterestRateType otherLoanProviderInterestRateType;

  public static final String SERIALIZED_NAME_LOAN_INTEREST_FEES_CHARGES = "LoanInterestFeesCharges";
  @SerializedName(SERIALIZED_NAME_LOAN_INTEREST_FEES_CHARGES)
  private List<OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestFeesCharges> loanInterestFeesCharges = null;


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand identification(String identification) {
    
    this.identification = identification;
    return this;
  }

   /**
   * Unique and unambiguous identification of a  Tier Band for a SME Loan.
   * @return identification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique and unambiguous identification of a  Tier Band for a SME Loan.")

  public String getIdentification() {
    return identification;
  }


  public void setIdentification(String identification) {
    this.identification = identification;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand tierValueMinimum(String tierValueMinimum) {
    
    this.tierValueMinimum = tierValueMinimum;
    return this;
  }

   /**
   * Minimum loan value for which the loan interest tier applies.
   * @return tierValueMinimum
  **/
  @ApiModelProperty(required = true, value = "Minimum loan value for which the loan interest tier applies.")

  public String getTierValueMinimum() {
    return tierValueMinimum;
  }


  public void setTierValueMinimum(String tierValueMinimum) {
    this.tierValueMinimum = tierValueMinimum;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand tierValueMaximum(String tierValueMaximum) {
    
    this.tierValueMaximum = tierValueMaximum;
    return this;
  }

   /**
   * Maximum loan value for which the loan interest tier applies.
   * @return tierValueMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum loan value for which the loan interest tier applies.")

  public String getTierValueMaximum() {
    return tierValueMaximum;
  }


  public void setTierValueMaximum(String tierValueMaximum) {
    this.tierValueMaximum = tierValueMaximum;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand tierValueMinTerm(Integer tierValueMinTerm) {
    
    this.tierValueMinTerm = tierValueMinTerm;
    return this;
  }

   /**
   * Minimum loan term for which the loan interest tier applies.
   * @return tierValueMinTerm
  **/
  @ApiModelProperty(required = true, value = "Minimum loan term for which the loan interest tier applies.")

  public Integer getTierValueMinTerm() {
    return tierValueMinTerm;
  }


  public void setTierValueMinTerm(Integer tierValueMinTerm) {
    this.tierValueMinTerm = tierValueMinTerm;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand minTermPeriod(MinTermPeriodEnum minTermPeriod) {
    
    this.minTermPeriod = minTermPeriod;
    return this;
  }

   /**
   * The unit of period (days, weeks, months etc.) of the Minimum Term
   * @return minTermPeriod
  **/
  @ApiModelProperty(required = true, value = "The unit of period (days, weeks, months etc.) of the Minimum Term")

  public MinTermPeriodEnum getMinTermPeriod() {
    return minTermPeriod;
  }


  public void setMinTermPeriod(MinTermPeriodEnum minTermPeriod) {
    this.minTermPeriod = minTermPeriod;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand tierValueMaxTerm(Integer tierValueMaxTerm) {
    
    this.tierValueMaxTerm = tierValueMaxTerm;
    return this;
  }

   /**
   * Maximum loan term for which the loan interest tier applies.
   * @return tierValueMaxTerm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum loan term for which the loan interest tier applies.")

  public Integer getTierValueMaxTerm() {
    return tierValueMaxTerm;
  }


  public void setTierValueMaxTerm(Integer tierValueMaxTerm) {
    this.tierValueMaxTerm = tierValueMaxTerm;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand maxTermPeriod(MaxTermPeriodEnum maxTermPeriod) {
    
    this.maxTermPeriod = maxTermPeriod;
    return this;
  }

   /**
   * The unit of period (days, weeks, months etc.) of the Maximum Term
   * @return maxTermPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unit of period (days, weeks, months etc.) of the Maximum Term")

  public MaxTermPeriodEnum getMaxTermPeriod() {
    return maxTermPeriod;
  }


  public void setMaxTermPeriod(MaxTermPeriodEnum maxTermPeriod) {
    this.maxTermPeriod = maxTermPeriod;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand fixedVariableInterestRateType(OBInterestFixedVariableType1Code fixedVariableInterestRateType) {
    
    this.fixedVariableInterestRateType = fixedVariableInterestRateType;
    return this;
  }

   /**
   * Get fixedVariableInterestRateType
   * @return fixedVariableInterestRateType
  **/
  @ApiModelProperty(required = true, value = "")

  public OBInterestFixedVariableType1Code getFixedVariableInterestRateType() {
    return fixedVariableInterestRateType;
  }


  public void setFixedVariableInterestRateType(OBInterestFixedVariableType1Code fixedVariableInterestRateType) {
    this.fixedVariableInterestRateType = fixedVariableInterestRateType;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand repAPR(String repAPR) {
    
    this.repAPR = repAPR;
    return this;
  }

   /**
   * The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.  For SME Loan, this APR is the representative APR which includes any account fees.
   * @return repAPR
  **/
  @ApiModelProperty(required = true, value = "The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.  For SME Loan, this APR is the representative APR which includes any account fees.")

  public String getRepAPR() {
    return repAPR;
  }


  public void setRepAPR(String repAPR) {
    this.repAPR = repAPR;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand loanProviderInterestRateType(LoanProviderInterestRateTypeEnum loanProviderInterestRateType) {
    
    this.loanProviderInterestRateType = loanProviderInterestRateType;
    return this;
  }

   /**
   * Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
   * @return loanProviderInterestRateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.")

  public LoanProviderInterestRateTypeEnum getLoanProviderInterestRateType() {
    return loanProviderInterestRateType;
  }


  public void setLoanProviderInterestRateType(LoanProviderInterestRateTypeEnum loanProviderInterestRateType) {
    this.loanProviderInterestRateType = loanProviderInterestRateType;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand loanProviderInterestRate(String loanProviderInterestRate) {
    
    this.loanProviderInterestRate = loanProviderInterestRate;
    return this;
  }

   /**
   * Loan provider Interest for the SME Loan product
   * @return loanProviderInterestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Loan provider Interest for the SME Loan product")

  public String getLoanProviderInterestRate() {
    return loanProviderInterestRate;
  }


  public void setLoanProviderInterestRate(String loanProviderInterestRate) {
    this.loanProviderInterestRate = loanProviderInterestRate;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand notes(List<String> notes) {
    
    this.notes = notes;
    return this;
  }

  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<String>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand otherLoanProviderInterestRateType(OBReadProduct2DataOtherProductTypeLoanInterestOtherLoanProviderInterestRateType otherLoanProviderInterestRateType) {
    
    this.otherLoanProviderInterestRateType = otherLoanProviderInterestRateType;
    return this;
  }

   /**
   * Get otherLoanProviderInterestRateType
   * @return otherLoanProviderInterestRateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBReadProduct2DataOtherProductTypeLoanInterestOtherLoanProviderInterestRateType getOtherLoanProviderInterestRateType() {
    return otherLoanProviderInterestRateType;
  }


  public void setOtherLoanProviderInterestRateType(OBReadProduct2DataOtherProductTypeLoanInterestOtherLoanProviderInterestRateType otherLoanProviderInterestRateType) {
    this.otherLoanProviderInterestRateType = otherLoanProviderInterestRateType;
  }


  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand loanInterestFeesCharges(List<OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestFeesCharges> loanInterestFeesCharges) {
    
    this.loanInterestFeesCharges = loanInterestFeesCharges;
    return this;
  }

  public OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand addLoanInterestFeesChargesItem(OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestFeesCharges loanInterestFeesChargesItem) {
    if (this.loanInterestFeesCharges == null) {
      this.loanInterestFeesCharges = new ArrayList<OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestFeesCharges>();
    }
    this.loanInterestFeesCharges.add(loanInterestFeesChargesItem);
    return this;
  }

   /**
   * Get loanInterestFeesCharges
   * @return loanInterestFeesCharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestFeesCharges> getLoanInterestFeesCharges() {
    return loanInterestFeesCharges;
  }


  public void setLoanInterestFeesCharges(List<OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestFeesCharges> loanInterestFeesCharges) {
    this.loanInterestFeesCharges = loanInterestFeesCharges;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand = (OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand) o;
    return Objects.equals(this.identification, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.identification) &&
        Objects.equals(this.tierValueMinimum, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.tierValueMinimum) &&
        Objects.equals(this.tierValueMaximum, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.tierValueMaximum) &&
        Objects.equals(this.tierValueMinTerm, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.tierValueMinTerm) &&
        Objects.equals(this.minTermPeriod, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.minTermPeriod) &&
        Objects.equals(this.tierValueMaxTerm, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.tierValueMaxTerm) &&
        Objects.equals(this.maxTermPeriod, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.maxTermPeriod) &&
        Objects.equals(this.fixedVariableInterestRateType, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.fixedVariableInterestRateType) &&
        Objects.equals(this.repAPR, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.repAPR) &&
        Objects.equals(this.loanProviderInterestRateType, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.loanProviderInterestRateType) &&
        Objects.equals(this.loanProviderInterestRate, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.loanProviderInterestRate) &&
        Objects.equals(this.notes, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.notes) &&
        Objects.equals(this.otherLoanProviderInterestRateType, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.otherLoanProviderInterestRateType) &&
        Objects.equals(this.loanInterestFeesCharges, obReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand.loanInterestFeesCharges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identification, tierValueMinimum, tierValueMaximum, tierValueMinTerm, minTermPeriod, tierValueMaxTerm, maxTermPeriod, fixedVariableInterestRateType, repAPR, loanProviderInterestRateType, loanProviderInterestRate, notes, otherLoanProviderInterestRateType, loanInterestFeesCharges);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBReadProduct2DataOtherProductTypeLoanInterestLoanInterestTierBand {\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    tierValueMinimum: ").append(toIndentedString(tierValueMinimum)).append("\n");
    sb.append("    tierValueMaximum: ").append(toIndentedString(tierValueMaximum)).append("\n");
    sb.append("    tierValueMinTerm: ").append(toIndentedString(tierValueMinTerm)).append("\n");
    sb.append("    minTermPeriod: ").append(toIndentedString(minTermPeriod)).append("\n");
    sb.append("    tierValueMaxTerm: ").append(toIndentedString(tierValueMaxTerm)).append("\n");
    sb.append("    maxTermPeriod: ").append(toIndentedString(maxTermPeriod)).append("\n");
    sb.append("    fixedVariableInterestRateType: ").append(toIndentedString(fixedVariableInterestRateType)).append("\n");
    sb.append("    repAPR: ").append(toIndentedString(repAPR)).append("\n");
    sb.append("    loanProviderInterestRateType: ").append(toIndentedString(loanProviderInterestRateType)).append("\n");
    sb.append("    loanProviderInterestRate: ").append(toIndentedString(loanProviderInterestRate)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherLoanProviderInterestRateType: ").append(toIndentedString(otherLoanProviderInterestRateType)).append("\n");
    sb.append("    loanInterestFeesCharges: ").append(toIndentedString(loanInterestFeesCharges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

