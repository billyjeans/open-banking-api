/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.OtherApplicationFrequency;
import org.openapitools.client.model.OtherCalculationFrequency;
import org.openapitools.client.model.OtherFeeRateType;
import org.openapitools.client.model.OtherFeeType;
import org.openapitools.client.model.Overdraft1OverdraftFeeChargeCap;

/**
 * Details about the fees/charges
 */
@ApiModel(description = "Details about the fees/charges")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-29T19:18:25.258264300+02:00[Europe/Berlin]")
public class Overdraft1OverdraftFeeChargeDetail {
  /**
   * Overdraft fee type
   */
  @JsonAdapter(FeeTypeEnum.Adapter.class)
  public enum FeeTypeEnum {
    ARRANGEDOVERDRAFT("ArrangedOverdraft"),
    
    EMERGENCYBORROWING("EmergencyBorrowing"),
    
    BORROWINGITEM("BorrowingItem"),
    
    OVERDRAFTRENEWAL("OverdraftRenewal"),
    
    ANNUALREVIEW("AnnualReview"),
    
    OVERDRAFTSETUP("OverdraftSetup"),
    
    SURCHARGE("Surcharge"),
    
    TEMPOVERDRAFT("TempOverdraft"),
    
    UNAUTHORISEDBORROWING("UnauthorisedBorrowing"),
    
    UNAUTHORISEDPAIDTRANS("UnauthorisedPaidTrans"),
    
    OTHER("Other"),
    
    UNAUTHORISEDUNPAIDTRANS("UnauthorisedUnpaidTrans");

    private String value;

    FeeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeTypeEnum fromValue(String value) {
      for (FeeTypeEnum b : FeeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEE_TYPE = "FeeType";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private FeeTypeEnum feeType;

  public static final String SERIALIZED_NAME_OVERDRAFT_CONTROL_INDICATOR = "OverdraftControlIndicator";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_CONTROL_INDICATOR)
  private Boolean overdraftControlIndicator;

  public static final String SERIALIZED_NAME_INCREMENTAL_BORROWING_AMOUNT = "IncrementalBorrowingAmount";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_BORROWING_AMOUNT)
  private String incrementalBorrowingAmount;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "FeeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private String feeAmount;

  public static final String SERIALIZED_NAME_FEE_RATE = "FeeRate";
  @SerializedName(SERIALIZED_NAME_FEE_RATE)
  private String feeRate;

  /**
   * Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
   */
  @JsonAdapter(FeeRateTypeEnum.Adapter.class)
  public enum FeeRateTypeEnum {
    LINKEDBASERATE("LinkedBaseRate"),
    
    GROSS("Gross"),
    
    NET("Net"),
    
    OTHER("Other");

    private String value;

    FeeRateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeRateTypeEnum fromValue(String value) {
      for (FeeRateTypeEnum b : FeeRateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeRateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeRateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeRateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeRateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEE_RATE_TYPE = "FeeRateType";
  @SerializedName(SERIALIZED_NAME_FEE_RATE_TYPE)
  private FeeRateTypeEnum feeRateType;

  /**
   * Frequency at which the overdraft charge is applied to the account
   */
  @JsonAdapter(ApplicationFrequencyEnum.Adapter.class)
  public enum ApplicationFrequencyEnum {
    ACCOUNTCLOSING("AccountClosing"),
    
    ACCOUNTOPENING("AccountOpening"),
    
    ACADEMICTERM("AcademicTerm"),
    
    CHARGINGPERIOD("ChargingPeriod"),
    
    DAILY("Daily"),
    
    PERITEM("PerItem"),
    
    MONTHLY("Monthly"),
    
    ONACCOUNTANNIVERSARY("OnAccountAnniversary"),
    
    OTHER("Other"),
    
    PERHOUR("PerHour"),
    
    PEROCCURRENCE("PerOccurrence"),
    
    PERSHEET("PerSheet"),
    
    PERTRANSACTION("PerTransaction"),
    
    PERTRANSACTIONAMOUNT("PerTransactionAmount"),
    
    PERTRANSACTIONPERCENTAGE("PerTransactionPercentage"),
    
    QUARTERLY("Quarterly"),
    
    SIXMONTHLY("SixMonthly"),
    
    STATEMENTMONTHLY("StatementMonthly"),
    
    WEEKLY("Weekly"),
    
    YEARLY("Yearly");

    private String value;

    ApplicationFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationFrequencyEnum fromValue(String value) {
      for (ApplicationFrequencyEnum b : ApplicationFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationFrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_FREQUENCY = "ApplicationFrequency";
  @SerializedName(SERIALIZED_NAME_APPLICATION_FREQUENCY)
  private ApplicationFrequencyEnum applicationFrequency;

  /**
   * How often is the overdraft fee/charge calculated for the account.
   */
  @JsonAdapter(CalculationFrequencyEnum.Adapter.class)
  public enum CalculationFrequencyEnum {
    ACCOUNTCLOSING("AccountClosing"),
    
    ACCOUNTOPENING("AccountOpening"),
    
    ACADEMICTERM("AcademicTerm"),
    
    CHARGINGPERIOD("ChargingPeriod"),
    
    DAILY("Daily"),
    
    PERITEM("PerItem"),
    
    MONTHLY("Monthly"),
    
    ONACCOUNTANNIVERSARY("OnAccountAnniversary"),
    
    OTHER("Other"),
    
    PERHOUR("PerHour"),
    
    PEROCCURRENCE("PerOccurrence"),
    
    PERSHEET("PerSheet"),
    
    PERTRANSACTION("PerTransaction"),
    
    PERTRANSACTIONAMOUNT("PerTransactionAmount"),
    
    PERTRANSACTIONPERCENTAGE("PerTransactionPercentage"),
    
    QUARTERLY("Quarterly"),
    
    SIXMONTHLY("SixMonthly"),
    
    STATEMENTMONTHLY("StatementMonthly"),
    
    WEEKLY("Weekly"),
    
    YEARLY("Yearly");

    private String value;

    CalculationFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalculationFrequencyEnum fromValue(String value) {
      for (CalculationFrequencyEnum b : CalculationFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalculationFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalculationFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalculationFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalculationFrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALCULATION_FREQUENCY = "CalculationFrequency";
  @SerializedName(SERIALIZED_NAME_CALCULATION_FREQUENCY)
  private CalculationFrequencyEnum calculationFrequency;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  public static final String SERIALIZED_NAME_OTHER_FEE_TYPE = "OtherFeeType";
  @SerializedName(SERIALIZED_NAME_OTHER_FEE_TYPE)
  private OtherFeeType otherFeeType;

  public static final String SERIALIZED_NAME_OTHER_FEE_RATE_TYPE = "OtherFeeRateType";
  @SerializedName(SERIALIZED_NAME_OTHER_FEE_RATE_TYPE)
  private OtherFeeRateType otherFeeRateType;

  public static final String SERIALIZED_NAME_OTHER_APPLICATION_FREQUENCY = "OtherApplicationFrequency";
  @SerializedName(SERIALIZED_NAME_OTHER_APPLICATION_FREQUENCY)
  private OtherApplicationFrequency otherApplicationFrequency;

  public static final String SERIALIZED_NAME_OTHER_CALCULATION_FREQUENCY = "OtherCalculationFrequency";
  @SerializedName(SERIALIZED_NAME_OTHER_CALCULATION_FREQUENCY)
  private OtherCalculationFrequency otherCalculationFrequency;

  public static final String SERIALIZED_NAME_OVERDRAFT_FEE_CHARGE_CAP = "OverdraftFeeChargeCap";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_FEE_CHARGE_CAP)
  private Overdraft1OverdraftFeeChargeCap overdraftFeeChargeCap;


  public Overdraft1OverdraftFeeChargeDetail feeType(FeeTypeEnum feeType) {
    
    this.feeType = feeType;
    return this;
  }

   /**
   * Overdraft fee type
   * @return feeType
  **/
  @ApiModelProperty(required = true, value = "Overdraft fee type")

  public FeeTypeEnum getFeeType() {
    return feeType;
  }


  public void setFeeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
  }


  public Overdraft1OverdraftFeeChargeDetail overdraftControlIndicator(Boolean overdraftControlIndicator) {
    
    this.overdraftControlIndicator = overdraftControlIndicator;
    return this;
  }

   /**
   * Specifies for the overdraft control feature/benefit
   * @return overdraftControlIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies for the overdraft control feature/benefit")

  public Boolean getOverdraftControlIndicator() {
    return overdraftControlIndicator;
  }


  public void setOverdraftControlIndicator(Boolean overdraftControlIndicator) {
    this.overdraftControlIndicator = overdraftControlIndicator;
  }


  public Overdraft1OverdraftFeeChargeDetail incrementalBorrowingAmount(String incrementalBorrowingAmount) {
    
    this.incrementalBorrowingAmount = incrementalBorrowingAmount;
    return this;
  }

   /**
   * Every additional tranche of an overdraft balance to which an overdraft fee is applied
   * @return incrementalBorrowingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Every additional tranche of an overdraft balance to which an overdraft fee is applied")

  public String getIncrementalBorrowingAmount() {
    return incrementalBorrowingAmount;
  }


  public void setIncrementalBorrowingAmount(String incrementalBorrowingAmount) {
    this.incrementalBorrowingAmount = incrementalBorrowingAmount;
  }


  public Overdraft1OverdraftFeeChargeDetail feeAmount(String feeAmount) {
    
    this.feeAmount = feeAmount;
    return this;
  }

   /**
   * Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
   * @return feeAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)")

  public String getFeeAmount() {
    return feeAmount;
  }


  public void setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
  }


  public Overdraft1OverdraftFeeChargeDetail feeRate(String feeRate) {
    
    this.feeRate = feeRate;
    return this;
  }

   /**
   * Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
   * @return feeRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)")

  public String getFeeRate() {
    return feeRate;
  }


  public void setFeeRate(String feeRate) {
    this.feeRate = feeRate;
  }


  public Overdraft1OverdraftFeeChargeDetail feeRateType(FeeRateTypeEnum feeRateType) {
    
    this.feeRateType = feeRateType;
    return this;
  }

   /**
   * Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
   * @return feeRateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)")

  public FeeRateTypeEnum getFeeRateType() {
    return feeRateType;
  }


  public void setFeeRateType(FeeRateTypeEnum feeRateType) {
    this.feeRateType = feeRateType;
  }


  public Overdraft1OverdraftFeeChargeDetail applicationFrequency(ApplicationFrequencyEnum applicationFrequency) {
    
    this.applicationFrequency = applicationFrequency;
    return this;
  }

   /**
   * Frequency at which the overdraft charge is applied to the account
   * @return applicationFrequency
  **/
  @ApiModelProperty(required = true, value = "Frequency at which the overdraft charge is applied to the account")

  public ApplicationFrequencyEnum getApplicationFrequency() {
    return applicationFrequency;
  }


  public void setApplicationFrequency(ApplicationFrequencyEnum applicationFrequency) {
    this.applicationFrequency = applicationFrequency;
  }


  public Overdraft1OverdraftFeeChargeDetail calculationFrequency(CalculationFrequencyEnum calculationFrequency) {
    
    this.calculationFrequency = calculationFrequency;
    return this;
  }

   /**
   * How often is the overdraft fee/charge calculated for the account.
   * @return calculationFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How often is the overdraft fee/charge calculated for the account.")

  public CalculationFrequencyEnum getCalculationFrequency() {
    return calculationFrequency;
  }


  public void setCalculationFrequency(CalculationFrequencyEnum calculationFrequency) {
    this.calculationFrequency = calculationFrequency;
  }


  public Overdraft1OverdraftFeeChargeDetail notes(List<String> notes) {
    
    this.notes = notes;
    return this;
  }

  public Overdraft1OverdraftFeeChargeDetail addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<String>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Free text for capturing any other info related to Overdraft Fees Charge Details
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Free text for capturing any other info related to Overdraft Fees Charge Details")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public Overdraft1OverdraftFeeChargeDetail otherFeeType(OtherFeeType otherFeeType) {
    
    this.otherFeeType = otherFeeType;
    return this;
  }

   /**
   * Get otherFeeType
   * @return otherFeeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OtherFeeType getOtherFeeType() {
    return otherFeeType;
  }


  public void setOtherFeeType(OtherFeeType otherFeeType) {
    this.otherFeeType = otherFeeType;
  }


  public Overdraft1OverdraftFeeChargeDetail otherFeeRateType(OtherFeeRateType otherFeeRateType) {
    
    this.otherFeeRateType = otherFeeRateType;
    return this;
  }

   /**
   * Get otherFeeRateType
   * @return otherFeeRateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OtherFeeRateType getOtherFeeRateType() {
    return otherFeeRateType;
  }


  public void setOtherFeeRateType(OtherFeeRateType otherFeeRateType) {
    this.otherFeeRateType = otherFeeRateType;
  }


  public Overdraft1OverdraftFeeChargeDetail otherApplicationFrequency(OtherApplicationFrequency otherApplicationFrequency) {
    
    this.otherApplicationFrequency = otherApplicationFrequency;
    return this;
  }

   /**
   * Get otherApplicationFrequency
   * @return otherApplicationFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OtherApplicationFrequency getOtherApplicationFrequency() {
    return otherApplicationFrequency;
  }


  public void setOtherApplicationFrequency(OtherApplicationFrequency otherApplicationFrequency) {
    this.otherApplicationFrequency = otherApplicationFrequency;
  }


  public Overdraft1OverdraftFeeChargeDetail otherCalculationFrequency(OtherCalculationFrequency otherCalculationFrequency) {
    
    this.otherCalculationFrequency = otherCalculationFrequency;
    return this;
  }

   /**
   * Get otherCalculationFrequency
   * @return otherCalculationFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OtherCalculationFrequency getOtherCalculationFrequency() {
    return otherCalculationFrequency;
  }


  public void setOtherCalculationFrequency(OtherCalculationFrequency otherCalculationFrequency) {
    this.otherCalculationFrequency = otherCalculationFrequency;
  }


  public Overdraft1OverdraftFeeChargeDetail overdraftFeeChargeCap(Overdraft1OverdraftFeeChargeCap overdraftFeeChargeCap) {
    
    this.overdraftFeeChargeCap = overdraftFeeChargeCap;
    return this;
  }

   /**
   * Get overdraftFeeChargeCap
   * @return overdraftFeeChargeCap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Overdraft1OverdraftFeeChargeCap getOverdraftFeeChargeCap() {
    return overdraftFeeChargeCap;
  }


  public void setOverdraftFeeChargeCap(Overdraft1OverdraftFeeChargeCap overdraftFeeChargeCap) {
    this.overdraftFeeChargeCap = overdraftFeeChargeCap;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Overdraft1OverdraftFeeChargeDetail overdraft1OverdraftFeeChargeDetail = (Overdraft1OverdraftFeeChargeDetail) o;
    return Objects.equals(this.feeType, overdraft1OverdraftFeeChargeDetail.feeType) &&
        Objects.equals(this.overdraftControlIndicator, overdraft1OverdraftFeeChargeDetail.overdraftControlIndicator) &&
        Objects.equals(this.incrementalBorrowingAmount, overdraft1OverdraftFeeChargeDetail.incrementalBorrowingAmount) &&
        Objects.equals(this.feeAmount, overdraft1OverdraftFeeChargeDetail.feeAmount) &&
        Objects.equals(this.feeRate, overdraft1OverdraftFeeChargeDetail.feeRate) &&
        Objects.equals(this.feeRateType, overdraft1OverdraftFeeChargeDetail.feeRateType) &&
        Objects.equals(this.applicationFrequency, overdraft1OverdraftFeeChargeDetail.applicationFrequency) &&
        Objects.equals(this.calculationFrequency, overdraft1OverdraftFeeChargeDetail.calculationFrequency) &&
        Objects.equals(this.notes, overdraft1OverdraftFeeChargeDetail.notes) &&
        Objects.equals(this.otherFeeType, overdraft1OverdraftFeeChargeDetail.otherFeeType) &&
        Objects.equals(this.otherFeeRateType, overdraft1OverdraftFeeChargeDetail.otherFeeRateType) &&
        Objects.equals(this.otherApplicationFrequency, overdraft1OverdraftFeeChargeDetail.otherApplicationFrequency) &&
        Objects.equals(this.otherCalculationFrequency, overdraft1OverdraftFeeChargeDetail.otherCalculationFrequency) &&
        Objects.equals(this.overdraftFeeChargeCap, overdraft1OverdraftFeeChargeDetail.overdraftFeeChargeCap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feeType, overdraftControlIndicator, incrementalBorrowingAmount, feeAmount, feeRate, feeRateType, applicationFrequency, calculationFrequency, notes, otherFeeType, otherFeeRateType, otherApplicationFrequency, otherCalculationFrequency, overdraftFeeChargeCap);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Overdraft1OverdraftFeeChargeDetail {\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    overdraftControlIndicator: ").append(toIndentedString(overdraftControlIndicator)).append("\n");
    sb.append("    incrementalBorrowingAmount: ").append(toIndentedString(incrementalBorrowingAmount)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    feeRate: ").append(toIndentedString(feeRate)).append("\n");
    sb.append("    feeRateType: ").append(toIndentedString(feeRateType)).append("\n");
    sb.append("    applicationFrequency: ").append(toIndentedString(applicationFrequency)).append("\n");
    sb.append("    calculationFrequency: ").append(toIndentedString(calculationFrequency)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherFeeType: ").append(toIndentedString(otherFeeType)).append("\n");
    sb.append("    otherFeeRateType: ").append(toIndentedString(otherFeeRateType)).append("\n");
    sb.append("    otherApplicationFrequency: ").append(toIndentedString(otherApplicationFrequency)).append("\n");
    sb.append("    otherCalculationFrequency: ").append(toIndentedString(otherCalculationFrequency)).append("\n");
    sb.append("    overdraftFeeChargeCap: ").append(toIndentedString(overdraftFeeChargeCap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

